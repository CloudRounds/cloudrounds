type Calendar implements Node {
  id: ID!
  name: String!
  description: String
  creatorId: String!
  creator: User
  canReadMembers: [User]
  canWriteMembers: [User]
  articles: ArticleConnection
  invites: [Invite]
  requests: [Request]
  emailMembers: [EmailMember]
  createdAt: DateTime!
}

type CalendarEdge {
  node: Calendar
  cursor: String!
}

type CalendarConnection {
  edges: [CalendarEdge]
  pageInfo: PageInfo
}

type Query {
  calendars(first: Int, after: String): CalendarConnection
  calendarsByUser(userId: String!, first: Int, after: String): CalendarConnection
  calendar(id: ID!): Calendar
}

type Mutation {
  createCalendar(input: CreateCalendarInput!): CreateCalendarPayload
  updateCalendar(input: UpdateCalendarInput!): UpdateCalendarPayload
  deleteCalendar(input: DeleteCalendarInput!): DeleteCalendarPayload
  addEmailMemberToCalendar(input: AddEmailMemberToCalendarInput!): AddEmailMemberToCalendarPayload
  removeUserFromCalendar(input: RemoveUserFromCalendarInput!): RemoveUserFromCalendarPayload
}

input CreateCalendarInput {
  name: String!
  description: String
  creatorId: String!
  clientMutationId: String
}

type CreateCalendarPayload {
  calendar: Calendar
  clientMutationId: String
}

input UpdateCalendarInput {
  id: ID!
  name: String!
  description: String
  creatorId: String!
  clientMutationId: String
}

type UpdateCalendarPayload {
  calendar: Calendar
  clientMutationId: String
}

input DeleteCalendarInput {
  id: ID!
  clientMutationId: String
}

type DeleteCalendarPayload {
  deletedCalendarId: ID
  clientMutationId: String
}

input AddEmailMemberToCalendarInput {
  calendarId: ID!
  email: String!
  clientMutationId: String
}

type AddEmailMemberToCalendarPayload {
  calendar: Calendar
  clientMutationId: String
}

input RemoveUserFromCalendarInput {
  userId: ID!
  calendarId: ID!
  clientMutationId: String
}

type RemoveUserFromCalendarPayload {
  calendar: Calendar
  clientMutationId: String
}
