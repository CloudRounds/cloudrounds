// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Article {
  id                String     @id @default(uuid())
  title             String
  eventLink         String?
  date              DateTime
  duration          String?
  organizerId       String
  organizer         User       @relation(name: "OrganizedArticles", fields: [organizerId], references: [id])
  meetingType       String?
  meetingId         String?
  passcode          String?
  speaker           String?
  location          String?
  additionalDetails String?
  createdAt         DateTime   @default(now())
  feedbacks         Feedback[]
  calendarId        String
  calendar          Calendar   @relation(name: "CalendarArticles", fields: [calendarId], references: [id])
  attendees         User[]     @relation("ArticleAttendees")
  favoritedBy       User[]     @relation("UserFavorites")

  @@index([calendarId])
  @@index([organizerId])
}

model Calendar {
  id              String        @id @default(uuid())
  name            String
  description     String?
  creatorId       String
  createdAt       DateTime      @default(now())
  creator         User          @relation(name: "UserCalendars", fields: [creatorId], references: [id])
  canReadMembers  User[]        @relation("CanReadCalendar")
  canWriteMembers User[]        @relation("CanWriteCalendar")
  articles        Article[]     @relation(name: "CalendarArticles")
  invites         Invite[]
  requests        Request[]
  emailMembers    EmailMember[]

  @@index([creatorId])
}

model User {
  id       String @id @default(uuid())
  username String @unique
  email    String @unique

  firstName           String
  lastName            String
  password            String
  university          String
  isAdmin             Boolean    @default(false)
  resetToken          String?
  resetTokenExpiry    DateTime?
  registerToken       String?
  registerTokenExpiry DateTime?
  emailValidated      Boolean    @default(false)
  createdAt           DateTime   @default(now())
  feedbacks           Feedback[]
  requests            Request[]
  calendars           Calendar[] @relation("UserCalendars")
  canReadCalendars    Calendar[] @relation("CanReadCalendar")
  canWriteCalendars   Calendar[] @relation("CanWriteCalendar")
  organizedArticles   Article[]  @relation("OrganizedArticles")
  favorites           Article[]  @relation("UserFavorites")
  attended            Article[]  @relation("ArticleAttendees")
  schedules           Schedule[] @relation("UserSchedules")

  @@index([username])
  @@index([email])
}

model Task {
  id               String    @id @default(uuid())
  title            String
  description      String?
  taskType         String // workout, reading, coding, learning, writing
  goal             String?
  duration         String? // Duration per session, e.g., "1h"
  frequency        Int? // frequency within the repeat interval
  repeat           String? // daily, weekly, monthly, null
  startDate        DateTime?
  endDate          DateTime?
  startTime        DateTime?
  endTime          DateTime?
  taskLength       String?
  status           String    @default("pending") // pending, in progress, completed
  progress         Json?
  customAttributes Json?

  @@map("tasks")
}

model Schedule {
  id          String          @id @default(uuid())
  name        String
  startDate   DateTime
  endDate     DateTime
  description String?
  userId      String
  user        User            @relation(name: "UserSchedules", fields: [userId], references: [id])
  events      ScheduleEvent[]
  createdAt   DateTime        @default(now())
  taskId      String?

  @@index([userId])
}

model ScheduleEvent {
  id          String    @id @default(uuid())
  scheduleId  String
  schedule    Schedule  @relation(fields: [scheduleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  duration    Int
  isAllDay    Boolean   @default(false)
  repeat      String?
  frequency   Int?
  endDate     DateTime?
  location    String?
  userId      String

  createdAt DateTime @default(now())

  @@index([scheduleId, userId])
}

model Feedback {
  id        String   @id @default(uuid())
  articleId String
  article   Article  @relation(fields: [articleId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  feedback  String
  createdAt DateTime @default(now())

  @@index([articleId])
  @@index([userId])
}

model Invite {
  id             String   @id @default(uuid())
  email          String   @unique
  calendarId     String
  calendarName   String
  token          String   @unique
  expirationTime DateTime
  createdAt      DateTime @default(now())
  creator        String?
  calendar       Calendar @relation(fields: [calendarId], references: [id])

  @@index([calendarId])
}

model Request {
  id          String   @id @default(uuid())
  calendarId  String
  calendar    Calendar @relation(fields: [calendarId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  yearOfStudy String?
  status      String   @default("Pending")
  message     String?
  email       String?
  createdAt   DateTime @default(now())

  @@index([calendarId])
  @@index([userId])
}

model EmailMember {
  id         String   @id @default(uuid())
  email      String
  calendarId String
  calendar   Calendar @relation(fields: [calendarId], references: [id])
  createdAt  DateTime @default(now())

  @@index([calendarId])
}
